from datetime import time
from pyswip import Prolog
import re
# path = '/home/pavel/PycharmProjects/Saper/input.txt'
# path2 = "/home/pavel/PycharmProjects/Saper/output.txt"
# x = 10
# y = 9
# mines = 12
# queryString = f"info({x},{y},{mines}), minesweeper({x},{y}), mines({mines})."
# prolog = Prolog()
# prolog.consult("minesweeper.pl")
# prolog.consult("play.pl")
# #prolog.consult("test.pl")
#
# #for sol in prolog.query("load_file('/home/pavel/PycharmProjects/Saper/input.txt')"):
# #    print(sol)
# for soln in prolog.query(queryString):
#     print(soln)
# #print(prolog.query("main"))
from tkinter import *
from random import choice


class Pole(object):  # —Å–æ–∑–¥–∞–µ–º –ö–ª–∞—Å—Å –ø–æ–ª—è, –Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Object
    def __init__(self, master, row, column):  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è. master - –æ–∫–Ω–æ Tk().
        self.button = Button(master, text='   ')  # –°–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–æ–ª—è –∞—Ç—Ä–∏–±—É—Ç 'button'
        self.mine = False  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–ª–∏—á–∏—è –º–∏–Ω—ã –≤ –ø–æ–ª–µ
        self.value = 0  # –ö–æ–ª-–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥
        self.viewed = False  # –û—Ç–∫—Ä—ã—Ç–æ/–∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª–µ
        self.flag = 0  # 0 - —Ñ–ª–∞–≥–∞ –Ω–µ—Ç, 1 - —Ñ–ª–∞–≥ —Å—Ç–æ–∏—Ç, 2 - —Å—Ç–æ–∏—Ç "?"
        self.around = []  # –ú–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
        self.clr = 'black'  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        self.bg = "darkgrey"  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        self.row = row  # –°—Ç—Ä–æ–∫–∞
        self.column = column  # –°—Ç–æ–ª–±–µ—Ü

    def viewAround(self):
        return self.around

    def setAround(self):
        if self.row == 0:
            self.around.append([self.row + 1, self.column])
            if self.column == 0:
                self.around.append([self.row, self.column + 1])
                self.around.append([self.row + 1, self.column + 1])
            elif self.column == len(buttons[self.row]) - 1:
                self.around.append([self.row, self.column - 1])
                self.around.append([self.row + 1, self.column - 1])
            else:
                self.around.append([self.row, self.column - 1])
                self.around.append([self.row, self.column + 1])
                self.around.append([self.row + 1, self.column + 1])
                self.around.append([self.row + 1, self.column - 1])
        elif self.row == len(buttons) - 1:
            self.around.append([self.row - 1, self.column])
            if self.column == 0:
                self.around.append([self.row, self.column + 1])
                self.around.append([self.row - 1, self.column + 1])
            elif self.column == len(buttons[self.row]) - 1:
                self.around.append([self.row, self.column - 1])
                self.around.append([self.row - 1, self.column - 1])
            else:
                self.around.append([self.row, self.column - 1])
                self.around.append([self.row, self.column + 1])
                self.around.append([self.row - 1, self.column + 1])
                self.around.append([self.row - 1, self.column - 1])
        else:
            self.around.append([self.row - 1, self.column])
            self.around.append([self.row + 1, self.column])
            if self.column == 0:
                self.around.append([self.row, self.column + 1])
                self.around.append([self.row + 1, self.column + 1])
                self.around.append([self.row - 1, self.column + 1])
            elif self.column == len(buttons[self.row]) - 1:
                self.around.append([self.row, self.column - 1])
                self.around.append([self.row + 1, self.column - 1])
                self.around.append([self.row - 1, self.column - 1])
            else:
                self.around.append([self.row, self.column - 1])
                self.around.append([self.row, self.column + 1])
                self.around.append([self.row + 1, self.column + 1])
                self.around.append([self.row + 1, self.column - 1])
                self.around.append([self.row - 1, self.column + 1])
                self.around.append([self.row - 1, self.column - 1])

    def view(self, event):
        if not mines:  # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏
            setMines()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω—ã
        if self.value == 0:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞. –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –¥–ª—è 6,7 –∏ 8, –Ω–æ —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Ñ–∞–Ω—Ç–∞–∑–∏—è
            self.clr = 'yellow'
            self.value = None
            self.bg = 'darkgrey'
        elif self.value == 1:
            self.clr = 'green'
        elif self.value == 2:
            self.clr = 'blue'
        elif self.value == 3:
            self.clr = 'red'
        elif self.value == 4:
            self.clr = 'purple'
        print(mines)
        print(flags)
        if self.mine and not self.viewed and not self.flag:  # –ï—Å–ª–∏ –≤ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –º–∏–Ω–∞, –æ–Ω–∞ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –Ω–∞ –Ω–µ–π –Ω–µ—Ç —Ñ–ª–∞–≥–∞
            self.button.configure(text='üí£', bg='red')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç—É—Ç –µ—Å—Ç—å –º–∏–Ω–∞
            self.viewed = True  # –ì–æ–≤–æ—Ä–∏–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞
            # for q in mines:
            #     buttons[q[0]][q[1]].view('<Button-1>')  # –Ø —Å–µ–π—á–∞—Å –±—É–¥—É –≤—Å–∫—Ä—ã–≤–∞—Ç—å –í–°–ï –º–∏–Ω—ã
            lose()  # –í—ã–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞

        elif not self.viewed and not self.flag:  # –ï—Å–ª–∏ –º–∏–Ω—ã –Ω–µ—Ç, –∫–ª–µ—Ç–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ —Ñ–ª–∞–≥ –Ω–µ —Å—Ç–æ–∏—Ç
            self.button.configure(text=self.value, fg=self.clr, bg=self.bg)  # –≤—ã–≤–æ–¥–∏–º –≤ —Ç–µ–∫—Å—Ç –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–µ
            self.viewed = True
            if self.value == None:  # –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–µ—Ç –º–∏–Ω
                for k in self.around:
                    buttons[k[0]][k[1]].view('<Button-1>')  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤–æ–∫—Ä—É–≥

    def setFlag(self, event):
        if self.flag == 0 and not self.viewed:  # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –∏ —Ñ–ª–∞–≥–∞ –Ω–µ—Ç
            self.flag = 1  # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
            self.button.configure(text='üö©', bg='yellow')  # –í—ã–≤–æ–¥–∏–º —Ñ–ª–∞–≥
            flags.append(self.row)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ —Ñ–ª–∞–≥–æ–≤
            flags.append(self.column)
        elif self.flag == 1:  # –ï—Å–ª–∏ —Ñ–ª–∞–≥ —Å—Ç–æ–∏–º
            self.flag = 2  # –°—Ç–∞–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ '?'
            self.button.configure(text='?', bg='blue')  # –í—ã–≤–æ–¥–∏–º –µ–≥–æ
            flags.pop(flags.index(self.row))  # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ñ–ª–∞–≥–æ–≤
            flags.pop(flags.index(self.column))
        elif self.flag == 2:  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å
            self.flag = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–ª–∞–≥–∞
            self.button.configure(text='   ', bg='white')  # –í—ã–≤–æ–¥–∏–º –ø—É—Å—Ç–æ—Ç—É
        if sorted(mines) == sorted(flags) and mines != []:  # –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Ñ–ª–∞–≥–æ–≤ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –º–∞—Å—Å–∏–≤—É –º–∏–Ω
            winer()  # –°–æ–æ–±—â–∞–µ–º –æ –ø–æ–±–µ–¥–µ
        print(mines)
        print(flags)


def bombParser():  # –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∏–Ω
    fileBomb = open("output2.txt", "r")
    outputBombs = open("outputBombs.txt", "w")
    # —Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    lines = fileBomb.readlines()
    for j in range((len(lines)) - 2):
        # s1 = "".join(c for c in line if line.isdecimal())
        s1 = re.findall(r'\d+', lines[j])
        s1 = [int(i) for i in s1]
        outputBombs.write(str(s1))
    # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
    fileBomb.close()
    outputBombs.close()
    outputBombs = open("outputBombs.txt", "r")
    lines = outputBombs.readlines()
    for line in lines:
        resline = line.replace(",", "")
        resline = resline.replace("[", " ")
        resline = resline.replace("]", " ")
        resline = resline.replace("  ", " ")
        resline = resline.replace("  ", " ")
        resline = resline.strip()
        resline = resline.split(" ")
        for i in range(len(resline)):
            t = int(resline[i])
            mines.append(t)
        print(mines)
        # print(mines)
        # fileBomb = open("output2.txt", "w")
        # fileBomb.write(resline)
        # fileBomb.close()


def setMines():  # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π –≤–æ–∫—Ä—É–≥ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∂–∞—Ç–æ–≥–æ –ø–æ–ª—è
    queryString = f"tell('{outputPath2}')."  # –û—Ç–∫—Ä—ã—Ç–∏–µ output2.txt –Ω–∞ –∑–∞–ø–∏—Å—å
    for soln in prolog.query(queryString):
        print(soln)
    queryString = f"info({lenght - 1}, {high - 1}, {bombs + 1}), minesweeper({lenght - 1}, {high - 1}), mines({bombs + 1}), print_store, told."  # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –º–∏–Ω
    for soln in prolog.query(queryString):
        print(soln)
    bombParser()
    setter()


def setter():  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–º–±—ã –≤ –∫–ª–∞—Å—Å
    for i in buttons:  # –®–∞–≥–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for j in i:  # –®–∞–≥–∞–µ–º –ø–æ –ø–æ–ª—è–º –≤ —Å—Ç—Ä–æ–∫–µ i
            for k in range(0, len(mines) - 1, 2):
                if (j.row == mines[k]) and (j.column == mines[k + 1]):
                    j.mine = True
                    print(j.row, j.column)
    for i in buttons:  # –®–∞–≥–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for j in i:  # –®–∞–≥–∞–µ–º –ø–æ –ø–æ–ª—è–º –≤ —Å—Ç—Ä–æ–∫–µ i
            for k in j.around:  # –®–∞–≥–∞–µ–º –ø–æ –ø–æ–ª—è–º –≤–æ–∫—Ä—É–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è j
                if buttons[k[0]][k[1]].mine:  # –ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–ª–µ–π k –º–∏–Ω–∞
                    buttons[buttons.index(i)][i.index(j)].value += 1  # –¢–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è j
    return


def lose():
    loseWindow = Tk()
    loseWindow.title('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:-(')
    loseWindow.geometry('300x100')
    loseLabe = Label(loseWindow, text='–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ!')
    loseLabe.pack()
    mines = []
    loseWindow.mainloop()


def winer():
    winWindow = Tk()
    winWindow.geometry('300x100')
    winWindow.title('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
    winLabe = Label(winWindow, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
    winLabe.pack()
    winWindow.mainloop()


def cheat(event):
    for t in mines:
        buttons[t[0]][t[1]].setFlag('<Button-1>')


def game(high, lenght):  # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    root = Tk()
    root.title('–°–∞–ø–µ—Ä')
    global buttons
    global mines
    global flags
    flags = []  # –ú–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ –º–µ—Å—Ç–∞, –≥–¥–µ —Å—Ç–æ—è—Ç —Ñ–ª–∞–∂–∫–∏
    mines = []  # –ú–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ –º–µ—Å—Ç–∞, –≥–¥–µ –ª–µ–∂–∞—Ç –º–∏–Ω—ã
    buttons = [[Pole(root, row, column) for column in range(high)] for row in
               range(lenght)]  # –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∞—Ç –ø–æ–ª—è
    for i in buttons:  # –¶–∏–∫–ª –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for j in i:  # –¶–∏–∫–ª –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç—Ä–æ–∫–∏
            j.button.grid(column=i.index(j), row=buttons.index(i), ipadx=7,
                          ipady=1)  # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∫–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ grid
            j.button.bind('<Button-1>', j.view)  # –ë–∏–Ω–¥–∏–º –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
            j.button.bind('<Button-3>', j.setFlag)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–∂–∫–∞
            j.setAround()  # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ self.around
    buttons[0][0].button.bind('<Control-Button-1>', cheat)  # —Å–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    root.resizable(False, False)  # –∑–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    root.mainloop()


def easySetting():
    global bombs, high, lenght
    bombs = 21
    high = 9
    lenght = 9
    game(high, lenght)


def medSetting():
    global bombs, high, lenght
    bombs = 55
    high = 16
    lenght = 16
    game(high, lenght)


def hardSetting():
    global bombs, high, lenght
    bombs = 103
    high = 30
    lenght = 16
    game(high, lenght)


def bombcounter():
    global bombs
    global lenght
    global high
    if mineText.get('1.0', END) == '\n':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        bombs = 10  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, —Ç–æ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∫–æ–ª-–≤–æ –±–æ–º–± - 10
    else:
        bombs = int(mineText.get('1.0', END))  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å, —Ç–æ —ç—Ç–æ –∏ –±—É–¥–µ—Ç –∫–æ–ª-–≤–æ –±–æ–º–±
    # if highText.get('1.0', END) == '\n':
    #     high = 9
    # else:
    #    high = int(highText.get('1.0', END))
    high = int(highScale.get())
    if lenghtText.get('1.0', END) == '\n':
        lenght = 9
    else:
        lenght = int(lenghtText.get('1.0', END))
    game(high, lenght)  # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ–ª-–≤–æ –ø–æ–ª–µ–π


outputPath = 'output.txt'
outputPath2 = 'output2.txt'
prolog = Prolog()
prolog.consult("minesweeper.pl")  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ª–æ–≥-–ø—Ä–æ–≥—Ä–∞–º–º—ã
settings = Tk()  # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
settings.title('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')  # –ü–∏—à–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
settings.geometry('400x250')  # –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä
easyBut = Button(settings, text='–õ—ë–≥–∫–∏–π 9—Ö9', command=easySetting)
medBut = Button(settings, text='–°—Ä–µ–¥–Ω–∏–π 16—Ö16', command=medSetting)
hardBut = Button(settings, text='–≠–∫—Å–ø–µ—Ä—Ç 16—Ö30', command=hardSetting)
mineText = Text(settings, width=5, height=1)  # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
mineLabe = Label(settings, height=1, text='–ë–æ–º–±—ã:')
highScale = Scale(settings, from_=5, to=100, orient=HORIZONTAL)
#highText = Text(settings, width=5, height=1)
highLabe = Label(settings, height=1, text='–®–∏—Ä–∏–Ω–∞:')
lenghtText = Text(settings, width=5, height=1)
lenghtLabe = Label(settings, height=1, text='–í—ã—Å–æ—Ç–∞:')
labe = Label(settings, height=1, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:')
mineBut = Button(settings, text='–ù–∞—á–∞—Ç—å', command=bombcounter)  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
easyBut.pack(fill=X)
medBut.pack(fill=X)
hardBut.pack(fill=X)
labe.pack()
mineLabe.place(x=5, y=120)
mineText.place(x=70, y=120)
highLabe.place(x=5, y=160)
#highText.place(x=70, y=140)
highScale.place(x=70, y=140)
lenghtLabe.place(x=5, y=180)
lenghtText.place(x=70, y=180)
mineBut.place(x=5, y=210)
settings.mainloop()
